{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

@Callable(i)
func default() = [ StringEntry("default-call-id", i.transactionId.toBase58String()) ]

@Callable(i)
func callWithPaymentsButNoArgs() = {
  let txId = i.transactionId.toBase58String()
  func addPaymentInfo(acc: List[StringEntry], index: Int) = {
    if index >= i.payments.size() 
    then acc 
    else {
      let pmt = i.payments[index]
        let asset = match pmt.assetId {
        case id: ByteVector => assetInfo(id).value().name + " (" + id.toBase58String() + ")"
        case waves: Unit => "WAVES"
      }
      acc :+ StringEntry(txId + "_" + index.toString(), pmt.amount.toString() + " " + asset)
    }
  }
  FOLD<10>([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], nil, addPaymentInfo)
}

@Callable(i)
func callWithNativeArgsAndNoPayments(bin: ByteVector, bool: Boolean, int: Int, str: String) = {
  let txId = i.transactionId.toBase58String()
  [
    BinaryEntry(txId + "_bin", bin),
    BooleanEntry(txId + "_bool", bool),
    IntegerEntry(txId + "_int", int),
    StringEntry(txId + "_str", str)
  ]
}

@Callable(i)
func callWithListArgsAndNoPayments(bin: List[ByteVector], bool: List[Boolean], int: List[Int], str: List[String]) = {
  let txId = i.transactionId.toBase58String()
  let binSize = bin.size()
  let boolSize = bool.size()
  let intSize = int.size()
  let strSize = str.size()
  [
    IntegerEntry(txId + "_bin_size", binSize),
    BinaryEntry(txId + "_bin_first", bin[0]),
    BinaryEntry(txId + "_bin_last", bin[binSize - 1]),
    IntegerEntry(txId + "_bool_size", boolSize),
    BooleanEntry(txId + "_bool_first", bool[0]),
    BooleanEntry(txId + "_bool_last", bool[boolSize - 1]),
    IntegerEntry(txId + "_int_size", intSize),
    IntegerEntry(txId + "_int_first", int[0]),
    IntegerEntry(txId + "_int_last", int[intSize - 1]),
    IntegerEntry(txId + "_str_size", strSize),
    StringEntry(txId + "_str_first", str[0]),
    StringEntry(txId + "_str_last", str[strSize - 1])
  ]
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
